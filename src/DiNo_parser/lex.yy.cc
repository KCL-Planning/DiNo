
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 106
#define YY_END_OF_BUFFER 107
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[695] =
    {   0,
      104,  104,  107,  106,  101,  103,  106,    1,    2,   91,
       89,   90,   92,  104,   98,  106,   95,   62,   93,   97,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,    3,    4,  100,  101,   70,  104,
      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  102,
       96,   94,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,   50,  100,  100,  100,  100,  100,  100,  100,  100,
      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  100,   49,  100,    0,    0,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       54,  100,  100,  100,  100,  100,  100,  100,  100,  100,
        0,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  100,  100,    0,   99,    0,    0,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,   55,
      100,   73,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,   60,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   16,    0,    0,    0,  100,
      100,   99,    0,    0,  100,  100,  100,  100,  100,  100,
      100,  100,  100,   53,  100,  100,  100,  100,    0,  100,
      100,  100,  100,  100,  100,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   33,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   22,
        0,    0,   80,   78,   99,   42,    0,  100,  100,   29,
       30,  100,   56,   51,   52,  100,  100,  100,  100,  100,
      100,    0,  100,  100,  100,  100,  100,   82,   31,    0,
        0,    0,    0,    0,    0,   58,    0,   44,    0,    0,
        0,    0,    0,    0,    0,    0,   63,   66,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   64,    0,
        7,    0,    9,    0,  100,    0,  100,  100,  100,  100,
      100,  100,  100,  100,  100,    0,  100,   57,  100,  100,
      100,  100,    0,    0,    0,    0,   35,    0,    0,    0,

        0,    0,    0,    0,   15,    0,    0,    0,    0,   59,
        0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
        0,  100,   41,  100,   75,   71,  100,  100,   74,  100,
       68,   67,   43,  100,  100,   76,   81,  100,    0,    0,
        0,    0,    0,    0,   48,    0,    0,    6,    0,    0,
        0,    0,    0,    0,   65,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,  100,  100,  100,  100,  100,
      100,  100,  100,   38,   19,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   21,    0,   47,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  100,  100,   88,

      100,  100,   79,   77,  100,  100,   72,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
        0,   20,    0,    0,    0,    0,    0,    0,  100,  100,
       87,   69,  100,  100,    0,   18,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,    0,
        0,    0,    0,  100,   83,  100,  100,    0,    0,    0,
        0,    0,    0,    0,    0,   46,    0,    0,   37,    0,
        5,    0,    0,    0,   86,  100,  100,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   84,  100,    0,    0,    0,    0,    0,    0,    0,

        0,   45,    0,    0,    0,    0,    0,   85,    0,    0,
        0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   23,   40,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   25,   27,    0,    0,
        0,    0,    0,   39,    0,    0,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   24,    0,    0,    0,    0,    0,    0,    0,
       26,    0,   28,    0,    0,    0,    0,   12,    0,    0,
       13,   10,   11,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,    1,   47,    1,   30,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   30,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[698] =
    {   0,
        0,   34,  553, 1688,   72, 1688,   36, 1688, 1688, 1688,
     1688,  534, 1688,   66,   83,  515,  483, 1688,  463, 1688,
      141,   68,  142,   70,  143,  147,  151,   76,  152,  177,
      158,  178,  183,  192, 1688, 1688,  221,   80, 1688,   74,
      465,  147,   67,  202,  231,  212,  124,  190,   73,   75,
       86,  204,  209,  184,  208,  237,  231,  202,  463, 1688,
     1688, 1688,    0,   78,  268,  270,  275,  294,  295,  282,
      287,  296,  302,  306,  313,  312,  339,   80,  321,  323,
      329,   82,  353,  362,  340,  344,  368,  369,  374,  384,
      447,  199,  280,  295,  295,  308,  333,  348,  265,  357,

      350,  374,  371,  368,  362,  371,  389,  383,  373,  376,
      384,  389,  383,  398,  405,  394,  398,  421,  404,  409,
      417,  454,  165,  442,  473,  477,  417,  455,  478,  483,
      484,  495,  497,  501,  503,  499,  507,  431,  523,  527,
      514,  528,  533,  535,  550,  515,  556,  560,  551,  564,
      426, 1688,  552,  428,  432,  475,  532,  535,  438,  548,
      539,  544,  565,  570,  573,  566,  559,  580,  575,  568,
      582,  583,  590,  589,  593,  586,  581,  598,  594,  599,
      609,  613,  595,  634,  640,  406,  316,  612,  610,  618,
      646,  647,  654,  658,  664,  673,  671,  677,  679,  690,

      606,  686,  696,  691,  707,  709,  717,  698,  722,  723,
      733,  734,  687,  657,  686,  698,  697,  709,  706,  712,
      734,  723,  729,  724,  727,  737,  737,  732, 1688,  744,
      737,  736,  749,  740,  759,  760,  749,  758,  764,  770,
      757,  771,  783,  768,  773,  781,  773,  779,  789,  807,
      811,  387,  792,  805,  790,  816,  827,  836,  820,  837,
      844,  846,  838,  850,  855,  832,  857,  870,  842,  868,
      878,  874,  882,  884,  898,  840,  867,  879,  874,  888,
      881,  882,  889,  880,  883,  893, 1688,  898,  359,  885,
      897,  908,  901,  908,  914,  909,  900,  913,  924,  919,

      932,  922,  922,  927,  924,  931,  357,  929,  276, 1688,
      942,  933,  959,  964,  258, 1688,  936,  936,  968,  980,
      982,  988,  994,  995,  999,  960,  944, 1004,  960, 1006,
     1010,  968, 1011, 1015,  987, 1021,  964, 1019, 1688,  987,
     1004, 1019, 1001, 1021, 1023, 1688, 1016, 1688, 1024, 1013,
     1023, 1034, 1022, 1027, 1031, 1045, 1688, 1688, 1029, 1033,
     1042, 1036, 1058, 1065, 1066, 1054, 1070, 1072, 1688, 1064,
     1688, 1072, 1688, 1065, 1062, 1066,  256, 1097, 1101, 1067,
     1071, 1112, 1081, 1127, 1128, 1081, 1132, 1107, 1082, 1092,
     1134, 1118, 1114, 1111, 1125, 1121,  227, 1117, 1124, 1135,

     1138, 1118, 1124, 1141, 1688, 1135,  223, 1136, 1146, 1688,
     1141, 1149, 1148, 1139, 1152, 1688, 1163, 1161, 1160, 1167,
     1182, 1175, 1688, 1172, 1197, 1198, 1185, 1185, 1204, 1176,
     1208, 1212, 1688, 1213, 1174,    0, 1219, 1196, 1201, 1200,
     1206, 1200, 1209, 1208,  217,  211, 1211, 1688, 1218, 1222,
     1211, 1226, 1213,  205, 1688, 1216, 1215, 1232, 1235, 1234,
     1235, 1236, 1234, 1237, 1230, 1237, 1236, 1244, 1258, 1279,
     1258, 1273, 1259, 1278, 1688, 1262, 1264, 1268, 1265, 1271,
     1287, 1276, 1292, 1289, 1688, 1289, 1688, 1281, 1279, 1291,
     1285, 1296, 1301, 1297, 1303, 1295,  182, 1310, 1316,    0,

     1313, 1322, 1238,    0, 1321, 1325,    0, 1320, 1316,  163,
     1331, 1332, 1325, 1337, 1337, 1331, 1341, 1339, 1331, 1688,
     1335, 1688, 1332,  157, 1332, 1338, 1347, 1344, 1348, 1356,
        0,    0, 1343, 1361,  153, 1688, 1366, 1370,  149, 1370,
     1361, 1373,  120, 1366, 1378, 1383, 1377, 1688, 1376, 1374,
     1380, 1395, 1380, 1386,    0, 1396, 1389, 1400, 1400, 1398,
     1393, 1395, 1405, 1397, 1406, 1688, 1412, 1420, 1688, 1408,
     1688, 1424, 1418, 1427,    0, 1419, 1420, 1434, 1435, 1442,
     1429, 1427, 1435, 1443, 1436, 1435, 1443, 1454, 1452,  119,
     1459,    0, 1458, 1460, 1462, 1469, 1466, 1471, 1462, 1463,

     1474, 1688, 1469, 1481, 1466, 1476, 1477,    0, 1488, 1493,
     1481, 1494, 1490, 1485, 1492, 1505, 1505, 1496, 1505, 1507,
     1504, 1517, 1502, 1518, 1511, 1518, 1688, 1688, 1515, 1523,
     1520, 1520, 1519, 1536, 1523, 1527, 1528, 1536, 1532, 1540,
     1536, 1537, 1544, 1554, 1554, 1546, 1688, 1688, 1563, 1562,
     1568, 1566, 1567, 1688, 1560, 1560, 1688, 1573, 1579, 1577,
     1573, 1569, 1589, 1584, 1576, 1578, 1578, 1587, 1585, 1590,
     1591, 1599, 1688, 1600, 1592, 1598, 1598, 1605, 1605, 1611,
     1688, 1613, 1688, 1611, 1617, 1618, 1615, 1688, 1616, 1620,
     1688, 1688, 1688, 1688, 1685,  110,   92

    } ;

static yyconst flex_int16_t yy_def[698] =
    {   0,
      694,    1,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  695,  694,  694,  694,  694,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  694,  694,  696,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  695,  694,
      694,  694,  697,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  696,  696,  696,  694,  694,  697,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  697,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  696,  696,  694,  694,  694,  694,  697,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      697,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  696,
      696,  694,  694,  694,  697,  696,  696,  696,  696,  696,
      696,  696,  697,  696,  696,  697,  696,  696,  694,  696,
      696,  696,  696,  696,  696,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  696,  696,  694,  694,  694,  697,  696,  696,
      696,  696,  696,  696,  696,  697,  697,  696,  697,  696,
      696,  694,  696,  696,  697,  696,  697,  696,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  697,  694,  697,  696,  696,  697,
      697,  696,  697,  696,  696,  694,  696,  696,  697,  697,
      696,  697,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  697,  694,  697,  696,  696,  697,  697,  696,  697,
      696,  696,  694,  696,  697,  697,  696,  697,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  697,  697,  697,  697,  697,  696,
      697,  697,  697,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  697,  697,  697,

      697,  697,  696,  697,  697,  697,  697,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  697,  697,
      697,  697,  697,  697,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  697,  697,  697,  697,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  697,  697,  697,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  697,  697,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  697,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,    0,  694,  694,  694

    } ;

static yyconst flex_int16_t yy_nxt[1761] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
        4,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   23,   24,   25,   22,   26,   27,   22,   22,
       22,   28,   29,   30,   31,   22,   22,   32,   33,   22,
       22,   34,   22,   22,   22,   35,   36,   21,   22,   22,
       23,   24,   25,   22,   26,   27,   22,   22,   28,   29,
       30,   31,   22,   22,   32,   33,   22,   22,   34,   22,
       22,   22,   37,   38,   39,   38,   41,   63,   40,   63,
       63,   38,   63,   38,   41,   63,   40,   63,   63,  138,
       63,   63,   63,   63,   63,   79,  109,   72,  110,   37,

       94,   39,   42,   80,   43,   44,   45,   46,   47,  111,
       48,   64,   73,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   79,  109,   72,  110,   94,  606,  565,
       42,   80,   43,   44,   45,   46,   47,  111,   48,   73,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       63,   63,   63,   63,   63,   63,   63,  107,  561,   63,
       63,   63,  558,   63,   63,   69,  549,   63,   92,   93,
       63,   65,  537,   66,   63,   70,   74,   63,   67,   68,
       75,   71,   76,   77,  107,   81,   63,   63,   78,   63,
       63,  528,   63,   69,   84,   63,   92,   93,   65,   85,

       66,   63,   70,   74,   63,   67,   68,   75,   71,   76,
       77,   86,   81,   82,  488,   78,   87,   83,   88,   89,
      481,   84,  108,  115,  112,   95,  480,   85,  113,   96,
       63,  116,  452,   63,  121,   97,  443,  151,   86,  104,
       82,   98,  105,   87,   83,  114,   88,   89,   90,  108,
      115,  106,  112,   95,   87,   99,  113,   96,  119,  116,
      117,  121,   97,  100,  151,  424,  101,  104,   98,  105,
      315,  102,  114,  103,  120,  118,   90,   63,  106,   63,
       63,   87,   63,   99,   63,  372,  119,   63,  117,  158,
      100,   63,  123,  101,   63,  125,   63,  126,  102,   63,

      103,  120,  118,  127,   63,   63,   63,   63,   63,  122,
      152,   63,  124,  130,   63,   63,  128,  158,   63,  129,
      123,   63,   63,  131,   63,   63,  252,  153,  187,  133,
       63,  154,   63,   63,  132,   63,  122,  152,   63,  124,
      130,   63,  134,  135,  128,  155,  136,  129,   63,   63,
      131,   63,   63,   63,  153,  140,   63,  133,  154,  145,
      137,  132,   63,  139,  156,   63,  370,  141,  352,  134,
      135,   63,  155,  136,   63,  146,  142,   63,   63,  159,
       63,   63,  140,   63,  157,  143,   63,  145,  137,  160,
      139,  156,  148,   63,  141,  144,   63,  161,  162,  315,

      163,  164,  146,  165,  142,  169,  147,  159,  166,  171,
      167,  157,  149,  143,  170,  150,  160,  172,  187,  173,
      148,  174,  144,  168,  176,  161,  162,  163,  164,  177,
      165,  175,  169,  147,  178,  181,  166,  171,  167,  149,
      179,  170,  150,  182,  183,  172,  173,  222,  190,  174,
      168,   63,  176,  213,   63,  217,  177,  180,  175,   91,
      218,  178,  181,   63,   63,   60,   63,   63,  179,  185,
      182,  201,  183,  184,  125,  190,  125,   91,  125,   62,
      125,  213,  186,  217,  180,  187,  186,   63,  218,  187,
       63,  191,   63,   63,  219,   63,   63,  185,  201,   61,

      188,  184,  193,  194,   63,  192,   63,   63,   63,   63,
       63,   63,   63,   63,  189,   63,   63,   60,  191,   63,
      197,  195,  219,   63,   63,  198,   63,   63,  188,  199,
      193,  194,   63,  192,  196,   63,   63,   63,  208,   63,
       63,  189,   63,  200,   63,   63,   40,   63,  197,  195,
      202,  220,  694,  198,  203,  206,  199,  205,  221,   63,
       63,  196,   63,   63,  204,   63,  208,  223,   63,   63,
      200,  224,   63,   63,  214,  209,   63,  211,  202,  220,
      207,  225,  203,  206,  226,  205,  221,  212,  694,  215,
      216,  204,  210,  227,  228,  223,  229,  230,  224,  231,

      232,  234,  214,  209,  233,  211,  235,  207,  225,  236,
      237,  238,  226,  239,  240,  212,  215,  216,  241,  210,
      242,  227,  228,  229,  230,  243,  245,  231,  232,  234,
      244,  233,  246,  266,  235,  249,  247,  236,  237,  238,
      248,  239,  240,   63,  253,  241,   63,  242,  254,   63,
      694,  255,   63,  243,  245,   63,   63,  244,   63,   63,
      246,  266,  249,   63,  247,  251,   63,   63,  248,  256,
       63,  253,  694,   63,  694,  254,   63,  250,  255,  257,
       63,  258,   63,   63,  277,   63,  263,  260,   63,   63,
      694,   63,  694,  251,  269,   63,  259,  256,   63,   63,

       63,  262,   63,   63,  250,   63,  257,   63,   63,  258,
       63,  261,  277,  265,  694,  260,   63,  267,   63,   63,
      276,   63,  264,  259,  278,  279,   63,  268,  262,   63,
      270,   63,   63,  282,   63,   63,  273,  280,  261,  271,
      272,  265,   63,   63,  267,   63,   63,  276,  281,  264,
      283,  278,  274,  279,  268,  284,  694,  285,  270,  286,
      275,  282,  287,  273,  280,  288,  271,  289,  272,  290,
      291,  292,  694,  293,  294,  281,  295,  283,  296,  274,
      297,  694,  300,  284,  285,  301,  286,  302,  275,  287,
      298,  299,  288,  303,  289,  304,  290,  291,  305,  292,

      293,  294,  306,  309,  295,  296,  307,  308,  297,  300,
      310,  311,  312,  301,  316,  302,   63,  298,  299,   63,
       63,  303,  304,   63,  317,   63,  305,  318,   63,   63,
      306,  309,   63,  307,  308,  319,   63,  310,  311,   63,
      312,  694,  316,  314,  313,   63,   63,  322,   63,   63,
      320,  694,  317,   63,  318,   63,   63,  326,   63,   63,
      327,  332,   63,  319,   63,  329,   63,   63,  321,   63,
      314,  313,  339,  323,  328,  322,  325,   63,  320,   63,
       63,  324,   63,  335,  330,  326,   63,   63,  327,  332,
       63,   63,  329,  337,   63,  321,   63,  331,  341,  339,

      323,  334,  328,  325,  333,  340,  343,   63,  324,  336,
       63,  344,  330,  345,  346,  342,  347,  694,  348,  349,
      350,  351,  694,  353,  354,  331,  341,  355,  356,  334,
      338,  333,  340,  343,  357,  358,  359,  336,  360,  344,
      345,  346,  342,  361,  347,  348,  349,  362,  350,  351,
      353,  363,  354,  364,  367,  355,  356,  338,  365,  366,
      368,  369,  357,  358,  359,  360,  371,  373,  375,  374,
      361,   63,  376,   63,  377,  362,   63,   63,  363,  694,
       63,  364,  367,  381,  380,  365,  366,  368,  369,   63,
      383,   63,   63,  371,   63,  373,  374,   63,  386,  376,

       63,  377,  392,   63,   63,  378,   63,   63,   63,  389,
      381,   63,  380,   63,  393,   63,   63,  383,   63,   63,
       63,  379,   63,   63,   63,  386,  390,   63,   63,  392,
       63,   63,  378,   63,  387,  694,  394,  389,  395,  694,
      396,  382,  393,  397,  398,  694,  388,  401,  379,  399,
      384,  402,  391,  390,  385,  403,  400,  404,  694,  405,
      406,  407,  387,  394,  408,  411,  395,  396,  382,  409,
      410,  397,  398,  388,  412,  401,  399,  384,  402,  391,
      413,  385,  403,  400,  414,  404,  405,  406,  407,  415,
      694,  416,  408,  411,  417,  418,  409,  410,  419,  420,

      430,  412,  421,  422,  423,  427,   63,  428,  413,   63,
       63,  433,  414,   63,  694,  435,   63,  415,  416,   63,
      425,   63,  417,  418,   63,  419,  436,  420,  430,  421,
      422,  423,  427,  426,  428,  429,   63,   63,  433,   63,
       63,   63,  435,   63,   63,  438,   63,  439,  425,  440,
      431,  432,  441,  436,  442,  444,  445,  437,  446,  447,
      426,  448,  449,  429,  434,  450,  694,  451,  453,  454,
      694,  455,  456,  438,  439,  457,  440,  458,  431,  432,
      441,  442,  444,  445,  459,  437,  446,  447,  448,  449,
      460,  434,  461,  450,  451,  453,  462,  454,  455,  463,

      456,  464,  465,  457,  458,  466,   63,   63,  467,   63,
       63,  459,  468,   63,  469,  471,   63,   63,  460,  461,
       63,   63,   63,  462,   63,   63,  463,  473,  472,  464,
      465,   63,  466,  474,  470,  479,  467,  475,  476,  477,
      468,  469,  471,  478,  482,  483,  484,   63,  485,  486,
       63,  487,  489,  490,  473,  491,  492,  493,  494,  495,
      474,  496,  470,  479,  475,  476,  477,  497,  498,  499,
      478,  482,  500,  483,  484,  485,  501,  486,  487,  489,
      490,  502,  507,  491,  492,  493,  494,  495,   63,  496,
      504,   63,  505,  506,  497,  498,  499,  508,  513,  500,

      509,  510,  503,  501,  511,  512,  514,  694,  515,  502,
      507,  516,  517,  518,  694,  519,  520,  504,  521,  523,
      505,  506,  522,  524,  526,  508,  513,  509,  510,  525,
      503,  511,  512,  527,  514,  515,  529,  530,  531,  516,
      517,  518,  519,  520,  532,  533,  521,  523,  534,  522,
      535,  524,  526,  536,  538,  539,  525,  540,  541,  542,
      527,  543,  544,  545,  529,  530,  531,  546,  547,  548,
      550,  551,  532,  533,  552,  554,  534,  535,  553,  555,
      536,  556,  538,  539,  540,  557,  541,  542,  543,  559,
      544,  545,  560,  562,  546,  547,  548,  550,  551,  563,

      564,  567,  552,  554,  566,  553,  568,  555,  556,  569,
      570,  571,  572,  557,  573,  694,  574,  559,  575,  576,
      560,  562,  577,  578,  579,  580,  563,  581,  564,  567,
      582,  566,  583,  586,  568,  584,  569,  570,  571,  572,
      585,  587,  573,  574,  588,  575,  589,  576,  590,  577,
      591,  578,  579,  580,  581,  592,  593,  582,  594,  595,
      583,  586,  584,  596,  694,  597,  598,  585,  599,  587,
      600,  588,  601,  602,  589,  590,  603,  604,  591,  605,
      607,  608,  592,  593,  609,  610,  594,  595,  611,  612,
      613,  596,  597,  598,  614,  599,  615,  616,  600,  601,

      602,  617,  618,  603,  619,  604,  620,  605,  607,  608,
      621,  622,  609,  610,  623,  625,  611,  612,  613,  624,
      626,  614,  627,  615,  628,  616,  629,  630,  617,  631,
      618,  619,  632,  620,  633,  694,  634,  621,  635,  622,
      636,  637,  623,  625,  638,  639,  624,  626,  640,  627,
      641,  628,  642,  643,  629,  630,  631,  644,  645,  653,
      632,  646,  633,  634,  647,  648,  635,  636,  649,  637,
      650,  638,  651,  639,  652,  640,  654,  655,  641,  642,
      643,  656,  694,  657,  644,  658,  645,  653,  646,  659,
      660,  647,  648,  661,  662,  649,  663,  650,  664,  651,

      665,  652,  666,  654,  667,  655,  668,  669,  670,  656,
      657,  671,  676,  658,  672,  673,  674,  659,  660,  675,
      677,  661,  662,  663,  678,  664,  679,  680,  665,  681,
      666,  682,  667,  668,  669,  683,  670,  684,  685,  671,
      676,  672,  673,  674,  686,  687,  675,  677,  688,  689,
      690,  678,  691,  692,  679,  680,  681,  693,  682,  694,
      694,  694,  683,  694,  684,  685,  694,  694,  694,  694,
      694,  686,  687,  694,  694,  688,  689,  690,  694,  691,
      692,  694,  694,  694,  693,   59,   59,    3,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694
    } ;

static yyconst flex_int16_t yy_chk[1761] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    5,    7,    5,   14,   22,   14,   24,
       22,   38,   24,   38,   40,   28,   40,   64,   28,   78,
       64,   82,   78,  697,   82,   28,   49,   24,   50,    2,

       43,    7,   15,   28,   15,   15,   15,   15,   15,   51,
       15,  696,   24,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   28,   49,   24,   50,   43,  590,  543,
       15,   28,   15,   15,   15,   15,   15,   51,   15,   24,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       21,   23,   25,   21,   23,   25,   26,   47,  539,   26,
       27,   29,  535,   27,   29,   23,  524,   31,   42,   42,
       31,   21,  510,   21,  123,   23,   25,  123,   21,   21,
       26,   23,   27,   27,   47,   29,   30,   32,   27,   30,
       32,  497,   33,   23,   31,   33,   42,   42,   21,   32,

       21,   34,   23,   25,   34,   21,   21,   26,   23,   27,
       27,   32,   29,   30,  454,   27,   33,   30,   34,   34,
      446,   31,   48,   54,   52,   44,  445,   32,   53,   44,
       37,   55,  407,   37,   58,   44,  397,   92,   32,   46,
       30,   44,   46,   33,   30,   53,   34,   34,   37,   48,
       54,   46,   52,   44,   37,   45,   53,   44,   57,   55,
       56,   58,   44,   45,   92,  377,   45,   46,   44,   46,
      315,   45,   53,   45,   57,   56,   37,   65,   46,   66,
       65,   37,   66,   45,   67,  309,   57,   67,   56,   99,
       45,   70,   66,   45,   70,   68,   71,   68,   45,   71,

       45,   57,   56,   68,   69,   72,   68,   69,   72,   65,
       93,   73,   67,   70,   73,   74,   69,   99,   74,   69,
       66,   76,   75,   71,   76,   75,  187,   94,  187,   73,
       79,   95,   80,   79,   72,   80,   65,   93,   81,   67,
       70,   81,   74,   75,   69,   96,   76,   69,   77,   85,
       71,   77,   85,   86,   94,   80,   86,   73,   95,   85,
       77,   72,   83,   79,   97,   83,  307,   81,  289,   74,
       75,   84,   96,   76,   84,   86,   83,   87,   88,  100,
       87,   88,   80,   89,   98,   84,   89,   85,   77,  101,
       79,   97,   88,   90,   81,   84,   90,  102,  103,  252,

      104,  105,   86,  106,   83,  109,   87,  100,  107,  111,
      108,   98,   89,   84,  110,   90,  101,  112,  186,  113,
       88,  114,   84,  108,  115,  102,  103,  104,  105,  116,
      106,  114,  109,   87,  117,  119,  107,  111,  108,   89,
      118,  110,   90,  120,  121,  112,  113,  159,  127,  114,
      108,  124,  115,  151,  124,  154,  116,  118,  114,   91,
      155,  117,  119,  122,  128,   59,  122,  128,  118,  124,
      120,  138,  121,  122,  125,  127,  125,   41,  126,   19,
      126,  151,  125,  154,  118,  125,  126,  129,  155,  126,
      129,  128,  130,  131,  156,  130,  131,  124,  138,   17,

      126,  122,  130,  131,  132,  129,  133,  132,  136,  133,
      134,  136,  135,  134,  126,  135,  137,   16,  128,  137,
      134,  132,  156,  141,  146,  135,  141,  146,  126,  136,
      130,  131,  139,  129,  133,  139,  140,  142,  146,  140,
      142,  126,  143,  137,  144,  143,   12,  144,  134,  132,
      139,  157,    3,  135,  140,  144,  136,  143,  158,  145,
      149,  133,  145,  149,  142,  147,  146,  160,  147,  148,
      137,  161,  148,  150,  153,  147,  150,  149,  139,  157,
      145,  162,  140,  144,  163,  143,  158,  150,    0,  153,
      153,  142,  148,  164,  165,  160,  166,  167,  161,  168,

      169,  171,  153,  147,  170,  149,  172,  145,  162,  173,
      174,  174,  163,  174,  175,  150,  153,  153,  176,  148,
      177,  164,  165,  166,  167,  178,  180,  168,  169,  171,
      179,  170,  181,  201,  172,  183,  182,  173,  174,  174,
      182,  174,  175,  184,  188,  176,  184,  177,  189,  185,
        0,  190,  185,  178,  180,  191,  192,  179,  191,  192,
      181,  201,  183,  193,  182,  185,  193,  194,  182,  191,
      194,  188,    0,  195,    0,  189,  195,  184,  190,  192,
      197,  193,  196,  197,  214,  196,  198,  195,  199,  198,
        0,  199,    0,  185,  204,  202,  194,  191,  202,  200,

      204,  197,  200,  204,  184,  203,  192,  208,  203,  193,
      208,  196,  214,  200,    0,  195,  205,  202,  206,  205,
      213,  206,  199,  194,  215,  216,  207,  203,  197,  207,
      205,  209,  210,  219,  209,  210,  208,  217,  196,  206,
      207,  200,  211,  212,  202,  211,  212,  213,  218,  199,
      220,  215,  209,  216,  203,  221,    0,  222,  205,  223,
      211,  219,  224,  208,  217,  225,  206,  226,  207,  227,
      228,  230,    0,  231,  232,  218,  233,  220,  234,  209,
      235,    0,  237,  221,  222,  238,  223,  239,  211,  224,
      236,  236,  225,  240,  226,  241,  227,  228,  242,  230,

      231,  232,  243,  246,  233,  234,  244,  245,  235,  237,
      247,  248,  249,  238,  253,  239,  250,  236,  236,  250,
      251,  240,  241,  251,  254,  256,  242,  255,  256,  259,
      243,  246,  259,  244,  245,  256,  257,  247,  248,  257,
      249,    0,  253,  251,  250,  258,  260,  259,  258,  260,
      257,    0,  254,  261,  255,  262,  261,  263,  262,  264,
      263,  269,  264,  256,  265,  266,  267,  265,  258,  267,
      251,  250,  276,  260,  265,  259,  262,  270,  257,  268,
      270,  261,  268,  272,  267,  263,  272,  271,  263,  269,
      271,  273,  266,  274,  273,  258,  274,  268,  278,  276,

      260,  271,  265,  262,  270,  277,  279,  275,  261,  273,
      275,  280,  267,  281,  282,  278,  283,    0,  284,  285,
      286,  288,    0,  290,  291,  268,  278,  292,  293,  271,
      275,  270,  277,  279,  294,  295,  296,  273,  297,  280,
      281,  282,  278,  298,  283,  284,  285,  299,  286,  288,
      290,  300,  291,  301,  304,  292,  293,  275,  302,  303,
      305,  306,  294,  295,  296,  297,  308,  311,  313,  312,
      298,  313,  317,  314,  318,  299,  314,  319,  300,    0,
      319,  301,  304,  327,  326,  302,  303,  305,  306,  320,
      329,  321,  320,  308,  321,  311,  312,  322,  332,  317,

      322,  318,  337,  323,  324,  319,  323,  324,  325,  335,
      327,  325,  326,  328,  340,  330,  328,  329,  330,  331,
      333,  322,  331,  333,  334,  332,  335,  334,  338,  337,
      336,  338,  319,  336,  333,    0,  341,  335,  342,    0,
      343,  328,  340,  344,  345,    0,  334,  349,  322,  347,
      330,  350,  336,  335,  331,  351,  347,  352,    0,  353,
      354,  355,  333,  341,  356,  361,  342,  343,  328,  359,
      360,  344,  345,  334,  362,  349,  347,  330,  350,  336,
      363,  331,  351,  347,  364,  352,  353,  354,  355,  365,
        0,  366,  356,  361,  367,  368,  359,  360,  370,  372,

      383,  362,  374,  375,  376,  380,  378,  381,  363,  378,
      379,  386,  364,  379,    0,  389,  388,  365,  366,  388,
      378,  382,  367,  368,  382,  370,  390,  372,  383,  374,
      375,  376,  380,  379,  381,  382,  384,  385,  386,  384,
      385,  387,  389,  391,  387,  392,  391,  393,  378,  394,
      384,  385,  395,  390,  396,  398,  399,  391,  400,  401,
      379,  402,  403,  382,  387,  404,    0,  406,  408,  409,
        0,  411,  412,  392,  393,  413,  394,  414,  384,  385,
      395,  396,  398,  399,  415,  391,  400,  401,  402,  403,
      417,  387,  418,  404,  406,  408,  419,  409,  411,  420,

      412,  421,  422,  413,  414,  424,  425,  426,  427,  425,
      426,  415,  428,  429,  430,  435,  429,  431,  417,  418,
      431,  432,  434,  419,  432,  434,  420,  438,  437,  421,
      422,  437,  424,  439,  434,  444,  427,  440,  441,  442,
      428,  430,  435,  443,  447,  449,  450,  503,  451,  452,
      503,  453,  456,  457,  438,  458,  459,  460,  461,  462,
      439,  463,  434,  444,  440,  441,  442,  464,  465,  466,
      443,  447,  467,  449,  450,  451,  468,  452,  453,  456,
      457,  469,  473,  458,  459,  460,  461,  462,  470,  463,
      471,  470,  472,  472,  464,  465,  466,  474,  480,  467,

      476,  477,  470,  468,  478,  479,  481,    0,  482,  469,
      473,  483,  484,  486,    0,  488,  489,  471,  490,  492,
      472,  472,  491,  493,  495,  474,  480,  476,  477,  494,
      470,  478,  479,  496,  481,  482,  498,  499,  501,  483,
      484,  486,  488,  489,  502,  505,  490,  492,  506,  491,
      508,  493,  495,  509,  511,  512,  494,  513,  514,  515,
      496,  516,  517,  518,  498,  499,  501,  519,  521,  523,
      525,  526,  502,  505,  527,  529,  506,  508,  528,  530,
      509,  533,  511,  512,  513,  534,  514,  515,  516,  537,
      517,  518,  538,  540,  519,  521,  523,  525,  526,  541,

      542,  545,  527,  529,  544,  528,  546,  530,  533,  547,
      549,  550,  551,  534,  552,    0,  553,  537,  554,  556,
      538,  540,  557,  558,  559,  560,  541,  561,  542,  545,
      562,  544,  563,  567,  546,  564,  547,  549,  550,  551,
      565,  568,  552,  553,  570,  554,  572,  556,  573,  557,
      574,  558,  559,  560,  561,  576,  577,  562,  578,  579,
      563,  567,  564,  580,    0,  581,  582,  565,  583,  568,
      584,  570,  585,  586,  572,  573,  587,  588,  574,  589,
      591,  593,  576,  577,  594,  595,  578,  579,  596,  597,
      598,  580,  581,  582,  599,  583,  600,  601,  584,  585,

      586,  603,  604,  587,  605,  588,  606,  589,  591,  593,
      607,  609,  594,  595,  610,  612,  596,  597,  598,  611,
      613,  599,  614,  600,  615,  601,  616,  617,  603,  618,
      604,  605,  619,  606,  620,    0,  621,  607,  622,  609,
      623,  624,  610,  612,  625,  626,  611,  613,  629,  614,
      630,  615,  631,  632,  616,  617,  618,  633,  634,  642,
      619,  635,  620,  621,  636,  637,  622,  623,  638,  624,
      639,  625,  640,  626,  641,  629,  643,  644,  630,  631,
      632,  645,    0,  646,  633,  649,  634,  642,  635,  650,
      651,  636,  637,  652,  653,  638,  655,  639,  656,  640,

      658,  641,  659,  643,  660,  644,  661,  662,  663,  645,
      646,  664,  669,  649,  665,  666,  667,  650,  651,  668,
      670,  652,  653,  655,  671,  656,  672,  674,  658,  675,
      659,  676,  660,  661,  662,  677,  663,  678,  679,  664,
      669,  665,  666,  667,  680,  682,  668,  670,  684,  685,
      686,  671,  687,  689,  672,  674,  675,  690,  676,    0,
        0,    0,  677,    0,  678,  679,    0,    0,    0,    0,
        0,  680,  682,    0,    0,  684,  685,  686,    0,  687,
      689,    0,    0,    0,  690,  695,  695,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.lex"
#line 2 "pddl+.lex"

#include <string>

#include <fstream>
  using std::cin;
  using std::cout;
  using std::cerr;
  using std::istream;
  using namespace PDDL2UPMurphi_parser;

#line 1046 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "pddl+.lex"

#line 1156 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 695 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1688 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "pddl+.lex"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "pddl+.lex"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "pddl+.lex"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "pddl+.lex"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "pddl+.lex"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "pddl+.lex"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "pddl+.lex"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "pddl+.lex"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "pddl+.lex"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "pddl+.lex"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "pddl+.lex"
{return EXT_PRECS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "pddl+.lex"
{return UNIV_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "pddl+.lex"
{return QUANT_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "pddl+.lex"
{return COND_EFFS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "pddl+.lex"
{return FLUENTS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "pddl+.lex"
{return PREFERENCES;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "pddl+.lex"
{return CONSTRAINTS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "pddl+.lex"
{return CONSTANTS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "pddl+.lex"
{return PREDS;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "pddl+.lex"
{return FUNCTIONS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "pddl+.lex"
{return TYPES;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "pddl+.lex"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "pddl+.lex"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "pddl+.lex"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "pddl+.lex"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "pddl+.lex"
{return DERIVED_PREDICATES;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "pddl+.lex"
{return TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "pddl+.lex"
{return DEFINE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "pddl+.lex"
{return PDDLDOMAIN;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "pddl+.lex"
{return ACTION;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "pddl+.lex"
{return PROCESS;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "pddl+.lex"
{return EVENT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "pddl+.lex"
{return DURATIVE_ACTION;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "pddl+.lex"
{return DERIVED;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "pddl+.lex"
{return ARGS;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "pddl+.lex"
{return PRE;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "pddl+.lex"
{return CONDITION;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "pddl+.lex"
{return START_PRE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "pddl+.lex"
{return END_PRE;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "pddl+.lex"
{return AT_START;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "pddl+.lex"
{return AT_END;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "pddl+.lex"
{return OVER_ALL;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "pddl+.lex"
{return EFFECTS;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "pddl+.lex"
{return INITIAL_EFFECT;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "pddl+.lex"
{return FINAL_EFFECT;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "pddl+.lex"
{return INVARIANT;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "pddl+.lex"
{return DURATION;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "pddl+.lex"
{return AND;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "pddl+.lex"
{return OR;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "pddl+.lex"
{return EXISTS;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "pddl+.lex"
{return FORALL;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "pddl+.lex"
{return IMPLY;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "pddl+.lex"
{return NOT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "pddl+.lex"
{return WHEN;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "pddl+.lex"
{return EITHER;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "pddl+.lex"
{return PROBLEM;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "pddl+.lex"
{return FORDOMAIN;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "pddl+.lex"
{return OBJECTS;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "pddl+.lex"
{return INITIALLY;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "pddl+.lex"
{return GOALS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "pddl+.lex"
{return EQ;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "pddl+.lex"
{return LENGTH;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "pddl+.lex"
{return SERIAL;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "pddl+.lex"
{return PARALLEL;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "pddl+.lex"
{return METRIC;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "pddl+.lex"
{return MINIMIZE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "pddl+.lex"
{return MAXIMIZE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "pddl+.lex"
{return ISVIOLATED;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "pddl+.lex"
{return HASHT;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "pddl+.lex"
{return DURATION_VAR;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "pddl+.lex"
{return TOTAL_TIME;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "pddl+.lex"
{return INCREASE;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "pddl+.lex"
{return DECREASE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "pddl+.lex"
{return SCALE_UP;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "pddl+.lex"
{return SCALE_DOWN;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "pddl+.lex"
{return ASSIGN;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "pddl+.lex"
{return PREFERENCE;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "pddl+.lex"
{return ALWAYS;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "pddl+.lex"
{return SOMETIME;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "pddl+.lex"
{return WITHIN;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "pddl+.lex"
{return ATMOSTONCE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "pddl+.lex"
{return SOMETIMEAFTER;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "pddl+.lex"
{return SOMETIMEBEFORE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "pddl+.lex"
{return ALWAYSWITHIN;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "pddl+.lex"
{return HOLDDURING;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "pddl+.lex"
{return HOLDAFTER;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "pddl+.lex"
{return PLUS;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "pddl+.lex"
{return HYPHEN;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "pddl+.lex"
{return MUL;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "pddl+.lex"
{return DIV;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "pddl+.lex"
{return GREATER;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "pddl+.lex"
{return GREATEQ;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "pddl+.lex"
{return LESS;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "pddl+.lex"
{return LESSEQ;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "pddl+.lex"
{return Q;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "pddl+.lex"
{return COLON;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 126 "pddl+.lex"
{unsigned int i;
           for(i = 3;i < strlen(yytext);++i)
           {
           	  if(yytext[i] != '\t' && yytext[i] != ' ') break;
           };
           yylval.fval = atof(yytext+i);
			return (AT_TIME);
          }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 136 "pddl+.lex"
{unsigned int i; 
          yylval.cp = new char[strlen(yytext)+1];
          strcpy(yylval.cp,yytext);
	  for(i = 0;i<strlen(yylval.cp);i++)
	      yylval.cp[i] = tolower(yylval.cp[i]);
	  // If symbol is registered as a function symbol,
	  // return token FUNCTION_SYMBOL else return NAME
	  //cout << yytext << " " << line_no << "\n";
	  if (current_analysis->func_tab.symbol_probe(yylval.cp) != NULL)
	      return FUNCTION_SYMBOL;
	  else
	      return NAME;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 149 "pddl+.lex"
;
	YY_BREAK
case 102:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 150 "pddl+.lex"
;
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 151 "pddl+.lex"
{line_no++;};
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 153 "pddl+.lex"
{yylval.ival = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 154 "pddl+.lex"
{yylval.fval = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 156 "pddl+.lex"
ECHO;
	YY_BREAK
#line 1792 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 695 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 695 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 694);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 156 "pddl+.lex"





